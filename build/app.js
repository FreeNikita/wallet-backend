"use strict";Object.defineProperty(exports, "__esModule", { value: true });exports.default = void 0;var _express = _interopRequireDefault(require("express"));
var _mongoose = _interopRequireDefault(require("mongoose"));
var _dotenv = _interopRequireDefault(require("dotenv"));


var _bodyParser = _interopRequireDefault(require("body-parser"));
var _apolloServerExpress = require("apollo-server-express");
var _graphQL = require("./graphQL");function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };} // graphQL

_dotenv.default.config();
const PORT = process.env.PORT || 3000;

const app = (0, _express.default)();

const server = new _apolloServerExpress.ApolloServer({
  typeDefs: _graphQL.typeDefs,
  resolvers: _graphQL.resolvers,
  // rootValue: root,
  introspection: true,
  playground: true,
  graphiql: true });


server.applyMiddleware({ app });

app.get('/*', (req, res) => {
  res.redirect('/graphql');
});

const listen = async () => {
  try {
    await _mongoose.default.connect(process.env.BD_HOST, {
      useNewUrlParser: true,
      useFindAndModify: false,
      useUnifiedTopology: true });


    app.listen(PORT, () => {
      console.log(`ðŸš€ Server ready at http://localhost:${PORT}${server.graphqlPath}`);
    });
  } catch (error) {
    console.log("Error Run Project: ", error);
  }
};

listen().catch(err => {
  console.error(err.message);
  process.exit(1);
});var _default =

app;exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9hcHAuanMiXSwibmFtZXMiOlsiZG90ZW52IiwiY29uZmlnIiwiUE9SVCIsInByb2Nlc3MiLCJlbnYiLCJhcHAiLCJzZXJ2ZXIiLCJBcG9sbG9TZXJ2ZXIiLCJ0eXBlRGVmcyIsInJlc29sdmVycyIsImludHJvc3BlY3Rpb24iLCJwbGF5Z3JvdW5kIiwiZ3JhcGhpcWwiLCJhcHBseU1pZGRsZXdhcmUiLCJnZXQiLCJyZXEiLCJyZXMiLCJyZWRpcmVjdCIsImxpc3RlbiIsIm1vbmdvb3NlIiwiY29ubmVjdCIsIkJEX0hPU1QiLCJ1c2VOZXdVcmxQYXJzZXIiLCJ1c2VGaW5kQW5kTW9kaWZ5IiwidXNlVW5pZmllZFRvcG9sb2d5IiwiY29uc29sZSIsImxvZyIsImdyYXBocWxQYXRoIiwiZXJyb3IiLCJjYXRjaCIsImVyciIsIm1lc3NhZ2UiLCJleGl0Il0sIm1hcHBpbmdzIjoib0dBQUE7QUFDQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0Esb0MsOEZBSEE7O0FBS0FBLGdCQUFPQyxNQUFQO0FBQ0EsTUFBTUMsSUFBSSxHQUFHQyxPQUFPLENBQUNDLEdBQVIsQ0FBWUYsSUFBWixJQUFvQixJQUFqQzs7QUFFQSxNQUFNRyxHQUFHLEdBQUcsdUJBQVo7O0FBRUEsTUFBTUMsTUFBTSxHQUFHLElBQUlDLGlDQUFKLENBQWlCO0FBQzVCQyxFQUFBQSxRQUFRLEVBQVJBLGlCQUQ0QjtBQUU1QkMsRUFBQUEsU0FBUyxFQUFUQSxrQkFGNEI7QUFHNUI7QUFDQUMsRUFBQUEsYUFBYSxFQUFFLElBSmE7QUFLNUJDLEVBQUFBLFVBQVUsRUFBRSxJQUxnQjtBQU01QkMsRUFBQUEsUUFBUSxFQUFFLElBTmtCLEVBQWpCLENBQWY7OztBQVNBTixNQUFNLENBQUNPLGVBQVAsQ0FBdUIsRUFBRVIsR0FBRixFQUF2Qjs7QUFFQUEsR0FBRyxDQUFDUyxHQUFKLENBQVEsSUFBUixFQUFjLENBQUNDLEdBQUQsRUFBTUMsR0FBTixLQUFjO0FBQ3hCQSxFQUFBQSxHQUFHLENBQUNDLFFBQUosQ0FBYSxVQUFiO0FBQ0gsQ0FGRDs7QUFJQSxNQUFNQyxNQUFNLEdBQUcsWUFBWTtBQUN2QixNQUFJO0FBQ0EsVUFBTUMsa0JBQVNDLE9BQVQsQ0FBaUJqQixPQUFPLENBQUNDLEdBQVIsQ0FBWWlCLE9BQTdCLEVBQXNDO0FBQ3hDQyxNQUFBQSxlQUFlLEVBQUUsSUFEdUI7QUFFeENDLE1BQUFBLGdCQUFnQixFQUFFLEtBRnNCO0FBR3hDQyxNQUFBQSxrQkFBa0IsRUFBRSxJQUhvQixFQUF0QyxDQUFOOzs7QUFNQW5CLElBQUFBLEdBQUcsQ0FBQ2EsTUFBSixDQUFXaEIsSUFBWCxFQUFpQixNQUFNO0FBQ25CdUIsTUFBQUEsT0FBTyxDQUFDQyxHQUFSLENBQWEsdUNBQXNDeEIsSUFBSyxHQUFFSSxNQUFNLENBQUNxQixXQUFZLEVBQTdFO0FBQ0gsS0FGRDtBQUdILEdBVkQsQ0FVRSxPQUFNQyxLQUFOLEVBQWE7QUFDWEgsSUFBQUEsT0FBTyxDQUFDQyxHQUFSLENBQVkscUJBQVosRUFBbUNFLEtBQW5DO0FBQ0g7QUFDSixDQWREOztBQWdCQVYsTUFBTSxHQUFHVyxLQUFULENBQWVDLEdBQUcsSUFBSTtBQUNsQkwsRUFBQUEsT0FBTyxDQUFDRyxLQUFSLENBQWNFLEdBQUcsQ0FBQ0MsT0FBbEI7QUFDQTVCLEVBQUFBLE9BQU8sQ0FBQzZCLElBQVIsQ0FBYSxDQUFiO0FBQ0gsQ0FIRCxFOztBQUtlM0IsRyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBleHByZXNzIGZyb20gJ2V4cHJlc3MnO1xuaW1wb3J0IG1vbmdvb3NlIGZyb20gJ21vbmdvb3NlJztcbmltcG9ydCBkb3RlbnYgZnJvbSAnZG90ZW52JztcblxuLy8gZ3JhcGhRTFxuaW1wb3J0IGJvZHlQYXJzZXIgZnJvbSAnYm9keS1wYXJzZXInO1xuaW1wb3J0IHsgQXBvbGxvU2VydmVyIH0gZnJvbSAnYXBvbGxvLXNlcnZlci1leHByZXNzJztcbmltcG9ydCB7IHR5cGVEZWZzLCByZXNvbHZlcnMsIHJvb3QgfSBmcm9tICcuL2dyYXBoUUwnO1xuXG5kb3RlbnYuY29uZmlnKClcbmNvbnN0IFBPUlQgPSBwcm9jZXNzLmVudi5QT1JUIHx8IDMwMDBcblxuY29uc3QgYXBwID0gZXhwcmVzcygpXG5cbmNvbnN0IHNlcnZlciA9IG5ldyBBcG9sbG9TZXJ2ZXIoe1xuICAgIHR5cGVEZWZzLFxuICAgIHJlc29sdmVycyxcbiAgICAvLyByb290VmFsdWU6IHJvb3QsXG4gICAgaW50cm9zcGVjdGlvbjogdHJ1ZSxcbiAgICBwbGF5Z3JvdW5kOiB0cnVlLFxuICAgIGdyYXBoaXFsOiB0cnVlLFxufSk7XG5cbnNlcnZlci5hcHBseU1pZGRsZXdhcmUoeyBhcHAgfSk7XG5cbmFwcC5nZXQoJy8qJywgKHJlcSwgcmVzKSA9PiB7XG4gICAgcmVzLnJlZGlyZWN0KCcvZ3JhcGhxbCcpXG59KVxuXG5jb25zdCBsaXN0ZW4gPSBhc3luYyAoKSA9PiB7XG4gICAgdHJ5IHtcbiAgICAgICAgYXdhaXQgbW9uZ29vc2UuY29ubmVjdChwcm9jZXNzLmVudi5CRF9IT1NULCB7XG4gICAgICAgICAgICB1c2VOZXdVcmxQYXJzZXI6IHRydWUsXG4gICAgICAgICAgICB1c2VGaW5kQW5kTW9kaWZ5OiBmYWxzZSxcbiAgICAgICAgICAgIHVzZVVuaWZpZWRUb3BvbG9neTogdHJ1ZVxuICAgICAgICB9KVxuXG4gICAgICAgIGFwcC5saXN0ZW4oUE9SVCwgKCkgPT4ge1xuICAgICAgICAgICAgY29uc29sZS5sb2coYPCfmoAgU2VydmVyIHJlYWR5IGF0IGh0dHA6Ly9sb2NhbGhvc3Q6JHtQT1JUfSR7c2VydmVyLmdyYXBocWxQYXRofWApXG4gICAgICAgIH0pXG4gICAgfSBjYXRjaChlcnJvcikge1xuICAgICAgICBjb25zb2xlLmxvZyhcIkVycm9yIFJ1biBQcm9qZWN0OiBcIiwgZXJyb3IgKVxuICAgIH1cbn1cblxubGlzdGVuKCkuY2F0Y2goZXJyID0+IHtcbiAgICBjb25zb2xlLmVycm9yKGVyci5tZXNzYWdlKTtcbiAgICBwcm9jZXNzLmV4aXQoMSk7XG59KTtcblxuZXhwb3J0IGRlZmF1bHQgYXBwO1xuIl19