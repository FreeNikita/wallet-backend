"use strict";Object.defineProperty(exports, "__esModule", { value: true });exports.resolversMutation = exports.typeDefsMutation = void 0;var _user = _interopRequireDefault(require("./../modules/user"));
var _wallet = _interopRequireDefault(require("../modules/wallet"));function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}

const typeDefsMutation = `
    type Mutation {
        setUser(firebase_id: String!): User
        createWallet(
            user_id: String,
            name: String,
            amount: Int,
            currency: String,
            type: String,
        ): Wallet
        
        removeWallet(
            wallet_id: String,
            user_id: String
        ): Id
        
        updateWallet(
            wallet_id: String,
            user_id: String,
            name: String,
            amount: Int,
            currency: String,
            type: String,
        ): Wallet
        
        addTransaction(
            wallet_id: String,
            user_id: String,
           
            amount: Int,
            title: String,
            category: String,
            subCategory: String,
            date: String,
            description: String,
        ): Status
        
        removeTransaction(
            wallet_id: String,
            user_id: String,
            trans_id: String,
            trans_amount: Int
        ): Status
        
        updateTransaction(
            wallet_id: String,
            user_id: String,
            trans_id: String
        ): String
    }
`;

// Move to USER_MODULES
exports.typeDefsMutation = typeDefsMutation;
const resolversMutation = {
  setUser: async (_, { firebase_id }) => {
    try {
      let user = await _user.default.findOne({
        firebase_id });


      if (user) return user;

      user = await new _user.default({
        firebase_id });


      return await user.save();
    } catch (err) {
      console.log('setUser: ', err);
    }
  },
  createWallet: async (_, params) => {
    try {
      const { user_id, name = '', amount = 0, currency = '', type = '' } = params;

      const wallet = await new _wallet.default({
        user_id,
        name,
        amount,
        currency,
        type });


      return await wallet.save();
    } catch (err) {
      console.log('createWallet: ', err);
    }
  },
  removeWallet: async (_, params) => {
    try {
      const { wallet_id, user_id } = params;
      await _wallet.default.findOneAndDelete({
        _id: wallet_id,
        user_id });


      return { id: wallet_id };
    } catch (err) {
      console.log('removeWallet: ', err);
    }
  },
  updateWallet: async (_, params) => {
    try {
      const { wallet_id, user_id, ...fields } = params;
      const wallet = await _wallet.default.findOneAndUpdate(
      {
        _id: wallet_id,
        user_id },

      { ...fields },
      {
        new: true });


      return wallet;
    } catch (err) {
      console.log('removeWallet: ', err);
    }
  },

  addTransaction: async (_, params) => {
    try {
      const { wallet_id, user_id, amount, ...fields } = params;
      const wallet = await _wallet.default.findOne({
        _id: wallet_id,
        user_id });


      wallet.history.push({
        ...fields,
        amount });


      wallet.amount = wallet.amount + amount;

      await wallet.save();
      return {
        status: "success" };

    } catch (err) {
      console.log('removeWallet: ', err);
    }
  },

  removeTransaction: async (_, params) => {
    try {
      const { wallet_id, user_id, trans_id } = params;
      const wallet = await _wallet.default.findOne({
        _id: wallet_id,
        user_id });


      const { amount } = wallet.history.find(({ id }) => id === trans_id);
      await wallet.updateOne({
        amount: wallet.amount - amount,
        $pull: {
          history: { _id: trans_id } } });



      return {
        status: "success" };

    } catch (err) {
      console.log('removeWallet: ', err);
    }
  },

  updateTransaction: () => {
    return {
      status: "Is not ready" };

  } };exports.resolversMutation = resolversMutation;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,